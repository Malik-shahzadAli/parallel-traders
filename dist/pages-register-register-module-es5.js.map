{"version":3,"sources":["webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/register/register.module.ts"],"names":["RegisterComponent","appSettings","fb","router","settings","form","group","compose","required","minLength","validator","values","valid","navigate","setTimeout","loadingSpinner","onSubmit","selector","templateUrl","routes","path","component","pathMatch","RegisterModule","forChild","imports","declarations"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  public form:FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: FormBuilder, public router:Router){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'name': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    setTimeout(() => {\r\n      this.settings.loadingSpinner = false; \r\n    }); \r\n  }\r\n}","<mat-sidenav-container class=\"h-100\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"h-100\">\r\n       <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit(form.value)\" fxFlex=\"90\" fxFlex.gt-sm=\"30\" fxFlex.sm=\"60\" class=\"mat-elevation-z6\">\r\n            <app-content-header \r\n                [icon]=\"'person_add'\" \r\n                [title]=\"'Register'\" \r\n                [hideBreadcrumb]=\"true\"\r\n                [hasBgImage]=\"true\" \r\n                [class]=\"'py-4'\"></app-content-header>            \r\n            <div class=\"p-4\">\r\n                <a mat-button routerLink=\"/login\" color=\"accent\" class=\"w-100\">Already have an account? Sign in!</a>\r\n                <mat-form-field class=\"w-100\">\r\n                    <mat-icon matPrefix class=\"mat-icon-sm mb-2 mr-2 secondary-text-color\">person</mat-icon>\r\n                    <input matInput placeholder=\"Full Name\" formControlName=\"name\">\r\n                    <mat-error *ngIf=\"form.controls.name.errors?.required\">Full Name is required</mat-error>\r\n                    <mat-error *ngIf=\"form.controls.name.hasError('minlength')\">Full Name isn't long enough, minimum of 3 characters</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"w-100\">\r\n                    <mat-icon matPrefix class=\"mat-icon-sm mb-2 mr-2 secondary-text-color\">mail</mat-icon>\r\n                    <input matInput placeholder=\"Email\" formControlName=\"email\">\r\n                    <mat-error *ngIf=\"form.controls.email.errors?.required\">Email is required</mat-error>\r\n                    <mat-error *ngIf=\"form.controls.email.hasError('invalidEmail')\">Invalid email address</mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"w-100\">\r\n                    <mat-icon matPrefix class=\"mat-icon-sm mb-2 mr-2 secondary-text-color\">lock</mat-icon>\r\n                    <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" minlength=\"6\">\r\n                    <mat-error *ngIf=\"form.controls.password.errors?.required\">Password is required</mat-error>\r\n                    <mat-error *ngIf=\"form.controls.password.hasError('minlength')\">Password isn't long enough, minimum of 6 characters</mat-error>\r\n                </mat-form-field> \r\n                <mat-form-field class=\"w-100\">\r\n                    <mat-icon matPrefix class=\"mat-icon-sm mb-2 mr-2 secondary-text-color\">lock</mat-icon>\r\n                    <input matInput placeholder=\"Confirm Password\" formControlName=\"confirmPassword\" type=\"password\">\r\n                    <mat-error *ngIf=\"form.controls.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n                    <mat-error *ngIf=\"form.controls.confirmPassword.hasError('mismatchedPasswords')\">Passwords do not match</mat-error>\r\n                </mat-form-field>\r\n                <button mat-raised-button color=\"primary\" class=\"mat-elevation-z6 w-100 mt-3\" type=\"submit\">SIGN UP</button>\r\n            </div>\r\n        </form>\r\n  </div>\r\n</mat-sidenav-container>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class RegisterModule { }"]}